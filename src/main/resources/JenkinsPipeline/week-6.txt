pipeline {
  agent any

  options {
    skipDefaultCheckout(true)
    disableConcurrentBuilds()
  }

  parameters {
    string(name: 'GIT_BRANCH', defaultValue: 'main',
           description: 'Git branch to build (e.g. main)')
  }
  tools {
    maven 'Maven3'
    jdk   'JDK17'
  }

  environment {
    SONAR_TOKEN_ID       = 'SONAR_TOKEN'
    NVD_API_CRED_ID      = 'NVD_API_key'
    ODC_TOOL_NAME        = 'OWASP DC'

    DC_REPORT_DIR        = 'dependency-check-reports'
    DC_PROJECT_NAME      = 'petclinic'
    DC_CACHE_DIR         = '/var/jenkins_home/dependency-check-data'
    DC_VALID_HOURS       = '4'
    DC_FAIL_CRITICAL     = '1'
    DC_UNSTABLE_HIGH     = '2'
    DC_UNSTABLE_MEDIUM   = '5'

    IAC_REPORT_DIR       = 'iac-reports'
    CHECKOV_VENV         = '/var/jenkins_home/.venvs/checkov'
    PIP_CACHE_DIR        = '/var/jenkins_home/.cache/pip'
    CHECKOV_FRAMEWORKS   = 'dockerfile,kubernetes,terraform'
    CHECKOV_VERSION      = '3.2.473'
  }

  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        script {
          def requested = params.GIT_BRANCH ?: 'main'
          def trimmed   = requested.trim()
          def repoUrl   = 'https://github.com/valletivarish/devsecops.git'
          echo "[SCM] Branch requested='${requested}', using='${trimmed}'"
          int exists = sh(returnStatus: true, script: "git ls-remote --exit-code --heads ${repoUrl} ${trimmed} >/dev/null 2>&1")
          def branchToBuild = (exists == 0) ? trimmed : 'main'
          if (exists != 0) echo "[SCM] '${trimmed}' not found → fallback to 'main'"
          checkout([
            $class: 'GitSCM',
            branches: [[name: "*/${branchToBuild}"]],
            userRemoteConfigs: [[url: repoUrl, credentialsId: 'github-username-pat']]
          ])
        }
      }
    }

    stage('Build with Maven') {
      steps {
        sh 'mvn -B -DskipTests -Dcheckstyle.skip=true clean package'
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: env.SONAR_TOKEN_ID, variable: 'SONAR_TOKEN')]) {
          sh '''
            set -e
            probe(){ url="$1"; [ -z "$url" ] && return 1; curl -sSf --max-time 3 "$url/api/system/status" >/dev/null 2>&1; }
            GATEWAY_IP="$(ip route | awk '/default/ {print $3; exit}')" || true
            FIRST_IPV4="$(ip -4 addr show scope global 2>/dev/null | awk "/inet /{print \\$2}" | cut -d/ -f1 | head -n1)" || true
            HOST_IP_ALT="$(hostname -I 2>/dev/null | awk "{print \\$1}")" || true
            CANDS="${SONAR_HOST_URL:-} http://localhost:9000 http://127.0.0.1:9000 http://${GATEWAY_IP}:9000 http://host.docker.internal:9000 http://${FIRST_IPV4}:9000 http://${HOST_IP_ALT}:9000"
            for u in $CANDS; do if probe "$u"; then SURL="$u"; break; fi; done
            if [ -z "$SURL" ]; then echo "[SONAR] Not reachable → skipping"; exit 0; fi
            echo "[SONAR] Using: $SURL"
            mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
              -DskipTests -Dcheckstyle.skip=true \
              -Dsonar.projectKey=petclinic -Dsonar.projectName="petclinic" \
              -Dsonar.host.url="$SURL" -Dsonar.token="$SONAR_TOKEN"
          '''
        }
      }
    }

    stage('OWASP Dependency-Check') {
      steps {
        withCredentials([string(credentialsId: env.NVD_API_CRED_ID, variable: 'NVD_API_KEY')]) {
          script {
            sh 'mkdir -p "${DC_CACHE_DIR}" "${DC_REPORT_DIR}"'
            echo "[OWASP] Cache='${env.DC_CACHE_DIR}' validFor=${env.DC_VALID_HOURS}h, Policy: FAIL_CRIT>=${env.DC_FAIL_CRITICAL}, UNSTABLE_HIGH>=${env.DC_UNSTABLE_HIGH}, UNSTABLE_MED>=${env.DC_UNSTABLE_MEDIUM}"

            catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
              def mavenRunner = (sh(returnStatus: true, script: "mvn -v >/dev/null 2>&1") == 0)
              if (mavenRunner) {
                echo "[OWASP] Runner: Maven plugin"
                sh '''
                  set -e
                  mvn -B org.owasp:dependency-check-maven:check \
                    -Dformat=ALL \
                    -DskipTests \
                    -DfailOnError=false \
                    -Dnvd.api.key="${NVD_API_KEY}" \
                    -DdataValidForHours=${DC_VALID_HOURS} \
                    -DdataDirectory="${DC_CACHE_DIR}" \
                    -DlogFile=target/dependency-check.log || true
                  cp -f target/dependency-check-report.* "${DC_REPORT_DIR}/" 2>/dev/null || true
                  cp -f target/dependency-check.log "${DC_REPORT_DIR}/" 2>/dev/null || true
                '''
              } else {
                echo "[OWASP] Runner: Jenkins plugin CLI"
                dependencyCheck(
                  odcInstallation: env.ODC_TOOL_NAME,
                  additionalArguments: """
                    --project "${DC_PROJECT_NAME}"
                    --scan "${WORKSPACE}"
                    --out "${WORKSPACE}/${DC_REPORT_DIR}"
                    -f ALL
                    --nvdApiKey "${NVD_API_KEY}"
                    --disableAssembly
                    --failOnCVSS 11
                    --data "${DC_CACHE_DIR}"
                    --cveValidForHours ${DC_VALID_HOURS}
                    --log "${WORKSPACE}/${DC_REPORT_DIR}/dependency-check.log"
                  """.trim(),
                  stopBuild: false
                )
              }
            }

            sh '''
              if [ -f "${DC_REPORT_DIR}/dependency-check.log" ]; then
                grep -E "Data directory|No NVD update required|Updating|Downloading NVD" "${DC_REPORT_DIR}/dependency-check.log" || true
              fi
            '''

            def jsonPath = "${env.DC_REPORT_DIR}/dependency-check-report.json"
            if (!fileExists(jsonPath)) {
              echo "[OWASP] JSON not found → skipping policy enforcement"
              return
            }

            def report = readJSON file: jsonPath
            def counts = [CRITICAL:0, HIGH:0, MEDIUM:0, LOW:0]
            (report.dependencies ?: []).each { d ->
              (d.vulnerabilities ?: []).each { v ->
                def s = (v.severity ?: '').toUpperCase()
                if (counts.containsKey(s)) counts[s] = counts[s] + 1
              }
            }
            echo "[OWASP] Counts: CRIT=${counts.CRITICAL} HIGH=${counts.HIGH} MED=${counts.MEDIUM} LOW=${counts.LOW}"

            int failCrit = env.DC_FAIL_CRITICAL.toInteger()
            int warnHigh = env.DC_UNSTABLE_HIGH.toInteger()
            int warnMed  = env.DC_UNSTABLE_MEDIUM.toInteger()

            if (counts.CRITICAL >= failCrit) {
              error("CRITICAL vulnerabilities found: ${counts.CRITICAL} (>= ${failCrit})")
            }
            if (counts.HIGH >= warnHigh || counts.MEDIUM >= warnMed) {
              echo "[OWASP] Result: UNSTABLE (HIGH>=${warnHigh} or MEDIUM>=${warnMed})"
              currentBuild.result = 'UNSTABLE'
            } else {
              echo "[OWASP] Result: SUCCESS (within policy)"
            }
          }
        }
      }
    }

    stage('Publish OWASP Report') {
      steps {
        dependencyCheckPublisher(
          pattern: "${env.DC_REPORT_DIR}/dependency-check-report.xml",
          stopBuild: false,
          skipNoReportFiles: true
        )
        sh '''
          set -e
          R="${DC_REPORT_DIR}"
          JSON="${R}/dependency-check-report.json"
          SUM="${R}/OWASP-Dependency-Check-Summary.txt"
          mkdir -p "$R"; : > "$SUM"
          echo "OWASP Dependency-Check Summary for ${DC_PROJECT_NAME}" >> "$SUM"
          echo "Generated: $(date -u +%FT%TZ)" >> "$SUM"
          if [ -f "$JSON" ]; then
            for s in CRITICAL HIGH MEDIUM LOW; do
              c=$(grep -o "\"severity\"\\s*:\\s*\"$s\"" "$JSON" | wc -l | tr -d ' ')
              printf "%s = %s\n" "$s" "$c" >> "$SUM"
            done
            echo "Reports:" >> "$SUM"
            [ -f "${R}/dependency-check-report.html" ] && echo "HTML: ${R}/dependency-check-report.html" >> "$SUM"
            [ -f "${R}/dependency-check-report.json" ] && echo "JSON: ${R}/dependency-check-report.json" >> "$SUM"
          else
            echo "No Dependency-Check JSON found." >> "$SUM"
          fi
        '''
        archiveArtifacts artifacts: "${env.DC_REPORT_DIR}/dependency-check-report.html, ${env.DC_REPORT_DIR}/dependency-check-report.json, ${env.DC_REPORT_DIR}/dependency-check.log, ${env.DC_REPORT_DIR}/OWASP-Dependency-Check-Summary.txt", fingerprint: true, allowEmptyArchive: true
        sh '''
          set -e
          R="${DC_REPORT_DIR}"
          rm -f "${R}/dependency-check-report.xml" \
                "${R}/dependency-check-report.sarif" || true
        '''
      }
    }

    stage('IaC Scan') {
      steps {
        sh '''
          set -e
          mkdir -p "${IAC_REPORT_DIR}" "${PIP_CACHE_DIR}" "$(dirname "${CHECKOV_VENV}")"
          as_sudo() { if command -v sudo >/dev/null 2>&1; then sudo "$@"; else "$@"; fi; }
          if ! command -v python3 >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              as_sudo apt-get update -y
              as_sudo apt-get install -y python3 python3-venv python3-pip
            elif command -v yum >/dev/null 2>&1; then
              as_sudo yum install -y python3 python3-pip || as_sudo yum install -y python39 python39-pip
            else
              exit 1
            fi
          fi
          if ! python3 -c "import venv" >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              as_sudo apt-get update -y
              as_sudo apt-get install -y python3-venv
            elif command -v yum >/dev/null 2>&1; then
              as_sudo yum install -y python3-virtualenv || true
            fi
          fi
          if [ ! -f "${CHECKOV_VENV}/bin/activate" ]; then
            python3 -m venv "${CHECKOV_VENV}" || {
              if command -v apt-get >/dev/null 2>&1; then
                as_sudo apt-get update -y
                as_sudo apt-get install -y python3-venv python3-pip
              elif command -v yum >/dev/null 2>&1; then
                as_sudo yum install -y python3 python3-pip || true
              fi
              python3 -m venv "${CHECKOV_VENV}"
            }
          fi
          . "${CHECKOV_VENV}/bin/activate"
          pip install --upgrade pip
          pip install --cache-dir "${PIP_CACHE_DIR}" -U "checkov==${CHECKOV_VERSION}"
          checkov -d "$WORKSPACE" --framework "${CHECKOV_FRAMEWORKS}" --output json > "${IAC_REPORT_DIR}/checkov-report.json" || true
          checkov -d "$WORKSPACE" --framework "${CHECKOV_FRAMEWORKS}" --output junitxml > "${IAC_REPORT_DIR}/checkov-report.xml" || true
          deactivate || true
          echo "Runner: pip (venv)" > "${IAC_REPORT_DIR}/runner.txt"
        '''
        junit allowEmptyResults: true, testResults: "${env.IAC_REPORT_DIR}/checkov-report.xml"
        archiveArtifacts artifacts: "${env.IAC_REPORT_DIR}/checkov-report.json", fingerprint: true, allowEmptyArchive: true
        sh '''
          set -e
          rm -f "${IAC_REPORT_DIR}/checkov-report.xml" \
                "${IAC_REPORT_DIR}/runner.txt" || true
        '''
      }
    }

    stage('Trivy FS Scan') {
      steps {
        script {
          sh '''
            set -e
            mkdir -p trivy-reports
            echo "[TRIVY] Starting filesystem scan..."

            as_sudo() { if command -v sudo >/dev/null 2>&1; then sudo "$@"; else "$@"; fi; }
            if ! command -v trivy >/dev/null 2>&1; then
              echo "[TRIVY] Installing Trivy..."
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
                | as_sudo sh -s -- -b /usr/local/bin
            fi

            echo "[TRIVY] Running scan (vuln, config, secret) → table.txt + json..."
            trivy fs --scanners vuln,config,secret --ignore-unfixed --no-progress \
              --format table -o trivy-reports/table.txt .

            trivy fs --scanners vuln,config,secret --ignore-unfixed --no-progress \
              --format json -o trivy-reports/trivy.json .

            echo "[TRIVY] Calculating severity counts from table..."
            CRIT=$(grep -w "CRITICAL" trivy-reports/table.txt | wc -l | tr -d ' ')
            HIGH=$(grep -w "HIGH"     trivy-reports/table.txt | wc -l | tr -d ' ')
            MED=$(grep -w "MEDIUM"    trivy-reports/table.txt | wc -l | tr -d ' ')
            LOW=$(grep -w "LOW"       trivy-reports/table.txt | wc -l | tr -d ' ')
            SECRETS=$(grep -i "secret" trivy-reports/table.txt | wc -l | tr -d ' ')

            echo "[TRIVY] Counts → CRITICAL=$CRIT HIGH=$HIGH MEDIUM=$MED LOW=$LOW SECRETS=$SECRETS"
            echo "[TRIVY] Building HTML report..."

            cat > trivy-reports/trivy.html <<HTML
<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>Trivy Filesystem Report</title>
<style>
  body{font-family:ui-monospace,monospace;margin:16px}
  h1{font-size:20px;margin:0 0 12px}
  .meta{color:#555;margin-bottom:10px}
  .chips{display:flex;gap:8px;margin:8px 0 16px}
  .chip{border:1px solid #e5e7eb;border-radius:999px;padding:6px 10px;background:#f8fafc}
  .crit{border-color:#ef4444;background:#fef2f2}
  .high{border-color:#f59e0b;background:#fff7ed}
  .med{border-color:#22c55e;background:#f0fdf4}
  .low{border-color:#60a5fa;background:#eff6ff}
  .sec{border-color:#8b5cf6;background:#f5f3ff}
  pre{white-space:pre-wrap;word-wrap:break-word;background:#f6f8fa;padding:12px;border-radius:8px;border:1px solid #e5e7eb}
  .note{font-size:12px;color:#666;margin-top:8px}
</style>
</head><body>
  <h1>Trivy Filesystem Scan</h1>
  <div class="meta">Scanners: vuln, config, secret • Ignore unfixed: true</div>
  <div class="chips">
    <span class="chip crit">CRITICAL: ${CRIT}</span>
    <span class="chip high">HIGH: ${HIGH}</span>
    <span class="chip med">MEDIUM: ${MED}</span>
    <span class="chip low">LOW: ${LOW}</span>
    <span class="chip sec">Secrets: ${SECRETS}</span>
  </div>
  <pre>
HTML
            sed -e 's/\\x1b\\[[0-9;]*m//g' trivy-reports/table.txt >> trivy-reports/trivy.html || true
            echo "</pre><div class='note'>JSON saved as <code>trivy-reports/trivy.json</code>.</div></body></html>" >> trivy-reports/trivy.html

            echo "[TRIVY] Report generated: trivy-reports/trivy.html (and trivy-reports/trivy.json)"
          '''

          archiveArtifacts artifacts: 'trivy-reports/trivy.html,trivy-reports/trivy.json', fingerprint: true, allowEmptyArchive: true

          publishHTML target: [
            reportDir: 'trivy-reports',
            reportFiles: 'trivy.html',
            reportName: 'Trivy FS Report',
            keepAll: true,
            alwaysLinkToLastBuild: true,
            allowMissing: true
          ]
        }
      }
    }
  }

  post {
    always {
      echo "[POST] Result=${currentBuild.currentResult}"
      echo "[POST] OWASP: ${env.DC_REPORT_DIR}/  IaC: ${env.IAC_REPORT_DIR}/"
      sh 'test -f "${IAC_REPORT_DIR}/runner.txt" && echo "[POST] IaC runner: $(cat ${IAC_REPORT_DIR}/runner.txt)" || true'
    }
  }
}
